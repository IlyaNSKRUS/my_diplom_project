ПОДГОТОВКА ПРОЕКТА
Устанавливаю Django:
pip install django
Устанавливаю DjangoRestFramework:
pip install django
Устанавливаю драйвер Python для PostgreSQL:
pip install psycopg2-binary
Создаю проект django:
django-admin startproject shop
Создаю приложение:
django-admin startapp backend

admin/admin

СОЗДАНИЕ ПРОЕКТА

1. Создание моделей - models.py

Ссылка на материал по созданию модели User - https://habr.com/ru/articles/313764/

Пояснения к коду:
"use_in_migrations = True" - делает менеджер модели доступным для миграции
is_staff в Django — это свойство объекта User, которое определяет, может ли пользователь войти на сайт администратора.
is_superuser в Django — булевое поле, которое определяет статус пользователя. Если ему присвоено значение True,
то у пользователя есть полные права на выполнение любых операций CRUD (создание, чтение, обновление и удаление)
на сайте администратора Django.
REQUIRED_FIELDS — список имен полей, которые будут запрашиваться при создании пользователя с помощью команды
управления createsuperuser
USERNAME_FIELD — строка с именем поля модели, которая используется в качестве уникального идентификатора
(unique=True в определении)
UnicodeUsernameValidator в Django используется для проверки имени пользователя, позволяя вводить символы Unicode,
в дополнение к @, ., +, -, и _.
from django_rest_passwordreset.tokens import get_token_generator:
django-rest-passwordreset - пакет, который предоставляет стратегию настраиваемого сброса пароля для Django Rest Framework.
С его помощью можно генерировать уникальные токены для проверки личности пользователей, которые запрашивают сброс пароля.

Необходимо изменить settings.py:
AUTH_USER_MODEL = 'backend.User'

!!! Проверить как работает from django.utils.translation import gettext_lazy as _ !!!
!!! Проверить как работает @staticmethod !!!

НАСТРОЙКА АДМИНИСТРАТИВНОЙ ПАНЕЛИ DJANGO / admin.py

В связи с тем, что изменил модель юзеров по умолчанию в файле настройках необходимо зарегистрировать свою модель юзеров в admin.py
https://docs.djangoproject.com/en/3.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets

Использовать декоратор - @admin.register

superadmin@mail.ru/Qwerty1@

View.py

Регистрация пользователя
class RegisterAccount(APIView):
Проверка обязательных аргументов
Метод issubset() в Python проверяет, все ли элементы одного множества присутствуют в другом.
Проверка пароля
from django.contrib.auth.password_validation import validate_password — это импорт функции для валидации пароля в Django.
Некоторые функции django.contrib.auth.password_validation можно вызывать из ваших собственных форм или кода для интеграции проверки пароля. Это может быть полезно, например, если вы используете настраиваемые формы для установки паролей или если вы пишете вызовы API для установки паролей.
validate_password( пароль , пользователь = Нет , password_validators = Нет ) 
    Проверяет пароль. Если все валидаторы верят, что пароль действителен, None будет возвращен. Если один или несколько валидаторов отклоняют пароль, выдается исключение, ValidationError содержащее все сообщения об ошибках валидаторов.
    Объект не user является обязательным: если его нет, некоторые валидаторы не смогут выполнить проверку и, следовательно, примут любой пароль
Проверка уникальности имени пользователя
Выражение «if user_serializer.is_valid()» в Django Rest Framework проверяет, что входные данные содержат все необходимые поля и все поля имеют правильный тип
Сохраняем пользователя
Метод set_password() в Django устанавливает пароль пользователя на заданную сырую строку, беря на себя хэширование пароля. При этом он не сохраняет объект User.

Применение механизма Signal для отправки письма после регистрации
https://habr.com/ru/companies/otus/articles/873118/
EmailMultiAlternatives в Django — класс для включения в email нескольких версий контента. Например, можно отправить и текстовую, и HTML-версию сообщения.
from django.dispatch import receiver — это импорт декоратора ресивера для использования в Django. С его помощью можно подключать функции к сигналам, например, для уведомления о завершении HTTP-запроса или сохранении модели.
from django.dispatch import Signal — это импорт класса Signal для определения собственных сигналов в Django.
Пароль для почты - bqwzosnvgorydeiy

Авторизация пользователя
https://habr.com/ru/companies/otus/articles/855086/
class LoginAccount(APIView):
Для аутентификации в Django можно использовать функцию authenticate(). Она принимает в качестве ключевых аргументов учётные данные (по умолчанию имя пользователя и пароль), проверяет их против каждого бэкенд-сервера аутентификации и возвращает объект User, если учётные данные верны для бэкенд-сервера. Если учётные данные не верны для любого бэкенд-сервера или если бэкенд вызывает PermissionDenied, функция возвращает None.
! функция возвращает None также в случае False значения is_active

Метод get_or_create() в Django возвращает объект, а если его нет в базе данных, то добавляет в неё новый объект.
Синтаксис: obj, created = ModelName.objects.get_or_create(field1=value1, field2=value2, defaults={other_field: other_value})

